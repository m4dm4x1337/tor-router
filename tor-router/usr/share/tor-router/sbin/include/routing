routing_up() {

  if ! kernel_has_ipv6_support; then
    return 0
  fi

  routing_down

  if ! tor_router_has_ipv6_support_enabled; then
    return 0
  fi

  if routing_ipv6_is_possible; then
    return 0
  fi

  # we need the routing trick only if there is no route into the global ipv6 internet

  if stderr=$( routing_make_up | routing_verbose_log | ip -6 -batch - 2>&1 ); then

    return 0

  fi

  printf '%s\n' "${stderr:-Unknown error}" | routing_error_log

  return 1

}

routing_down() {

  if ! routing_trick_is_up; then
    return 0
  fi

  routing_make_down | routing_verbose_log | ip -6 -force -batch - 2>/dev/null || true

}

routing_make_up() {

  local virt_addr=$( get_virtual_addr6 )
  local server_addr=$( get_server_addr6 )
  local server_interface=$( interface_from_addr $server_addr || echo lo )

cat << RULES
route add 2000::/3 table tor-router dev $server_interface
route add $( get_virtual_addr6 ) table tor-router dev $server_interface
rule add pref 8040 table tor-router
RULES
}

routing_make_down() {
cat << RULES
route flush table tor-router
rule del pref 8040 table tor-router
RULES
}

routing_trick_is_up() {
  ip -6 route show table tor-router 2>/dev/null || true | grep -q -m1 -wF dev ||
  ip -6 rule show pref 8040 | grep -q -m1 -wF tor-router
}

routing_ipv6_is_possible() {
  ip -6 route get 2001:4860:4860::8888 >/dev/null 2>&1 # check if there is a ipv6 route to the google DNS server
}

routing_error_log() {
  sed -E 's/^.*$/\x1b[5;1;37;41m[IP6] \x1b[0m\x1b[1;37;41m\0\x1b[0m/' >&2
}

routing_verbose_log() {
  if tor_router_has_verbose_logging_enabled; then
    { tee /dev/stderr 2>&3 | routing_highlight "[IP6]" ; } 3>&1 1>&2
  else
    cat -
  fi
}

routing_highlight() {

  local d="\x1b[1;30m" r="\x1b[1;31m" g="\x1b[1;32m" y="\x1b[1;33m" b="\x1b[1;34m" m="\x1b[1;35m" c="\x1b[1;36m" w="\x1b[1;37m" _="\x1b[0m"

  sed -E "
    s/(^)(route|rule)\b/\1${w}\2${_}/g
    s/(\s)(dev)(\s+)(\S+)\b/\1\2\3${c}\4${_}/g
    s/(\s)(add|replace)\b/\1${g}\2${_}/g
    s/(\s)(local)\b/\1${y}\2${_}/g
    s/(\s)(del|flush)\b/\1${r}\2${_}/g
    s/(\s)(dev|table|proto|metric|pref)\b/\1${m}\2${_}/g
    s/(\s)(tor-router|static|medium|proto|metric|pref)\b/\1${b}\2${_}/g
    s/(\s)(\S+)(\/)([0-9]+)/\1${b}\2${_}${r}\3${_}${c}\4${_}/g # CIDR
    s/(\s)([0-9]+)/\1${b}\2${_}/
    s/^/${d}$1${_} /
  "
}

