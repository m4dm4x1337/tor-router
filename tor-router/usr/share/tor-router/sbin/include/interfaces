interface_from_addr() { # $1 = addr
  ip -br addr show | {
    local iface= state= addrlist= addr=
    while read -r iface state addrlist; do
      for addr in $addrlist; do
        if [ "${addr%%/*}" = "$1" ]; then
          echo $iface
          return 0
        fi
      done
    done
    return 1
  }
}

interface_get_default_addr() { # $1 = inet (4/6) $2 = interface (optional)
  ip -$1 -br addr show dev "${2:-`interface_get_default $1`}" | {
    local iface= state= addresses= addr=
    if read -r iface state addresses; then
      addr="${addresses%%[[:space:]]*}"
      if [ -z $addr ]; then
        return 1
      fi
      echo ${addr%%/*}
    else
      return 1
    fi
  }
}

interface_has_default_gateway() { # $1 = inet (4/6) $2 = iface
  ip -$1 route show default dev "$2" | {
    local a= b= c=
    while IFS=' ' read -r a b c; do
      case "$a,$b,$c" in
        default,via,*)
          return 0
        ;;
      esac
    done
    return 1
  }
}

interface_get_default() { # $1 = inet (4/6)

  local file= ethernet= wireless= virtual=

  local -

  set +f

  for file in /sys/class/net/*; do
    if interface_has_default_gateway "$1" "${file##*/}"; then
      if [ -e "$file/device" ]; then
        if [ -e "$file/wireless" ]; then
          wireless="${wireless:+$wireless }${file##*/}"
        else
          ethernet="${ethernet:+$ethernet }${file##*/}"
        fi
      else
        virtual="${virtual:+$virtual }${file##*/}"
      fi
    fi
  done

  if [ -n "$ethernet" ]; then
    echo "${ethernet%%[[:space:]]*}"
  elif [ -n "$wireless" ]; then
    echo "${wireless%%[[:space:]]*}"
  elif [ -n "$virtual" ]; then
    echo "${virtual%%[[:space:]]*}"
  else
    return 1
  fi

}

interface_is_managed() { # $1=interface

  local -

  set -f

  [ "$1" = "lo" ] ||
  iterate "${INTERFACES:-*}" | {
    local pattern= note=
    while IFS=',' read -r pattern note; do
      if [ -n "$pattern" -a -z "${1##$pattern}" ]; then
        return 0
      fi
    done
    return 1
  }
}

